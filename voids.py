import vk_api
import random
import vk_api.keyboard
import time
from db import create_new_people, conn, c

def parse_message(event, vk_session):
    user = vk_session.method('users.get', {'user_id': event.user_id})[0]

    print(time.strftime("%Y.%m.%d %H:%M:%S", time.localtime()), "{0[first_name]} {0[last_name]}: {1.text}".format(user, event))
    c.execute('SELECT * FROM people WHERE vk_id=:vk_id', {'vk_id': user['id']})
    user_from_db = c.fetchall()
    if vk_session.method('groups.isMember', {'group_id': 181015479, 'user_id': user['id']}):
        if user_from_db != []:
            user_from_db = user_from_db[-1]
            if not user_from_db[10] is None:
                del_keyboard(user_from_db[10], vk_session=vk_session)
                with conn:
                    c.execute('''UPDATE people SET message_id=:message_id WHERE id=:id''',
                              {'id': user_from_db[0], 'message_id': None})

        if user_from_db == []:
            create_new_people(conn, c, user)
            ask_for_name(user, vk_session)
        elif event.text == '–ü–æ–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—ÉüÜï':
            if not user_from_db[8] is None:
                create_new_people(conn, c, user)
                ask_for_name(user, vk_session)
            else:
                vk_session.method('messages.send', {'user_id': user['id'], 'random_id': random.getrandbits(64),
                                                    'message': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–πüòü.'})
        elif event.text == '–†–∞—Å—Å—ã–ª–∫–∞üì´':
            mailing(user, conn, c, user_from_db, vk_session=vk_session)
        elif event.text == 'first':
            c.execute('''SELECT * FROM mailing WHERE id=:id''', {'id': user['id']})
            user_mailing = c.fetchone()
            with conn:
                c.execute('''UPDATE mailing SET first=:first WHERE id=:id''',
                          {'id': user['id'], 'first': int(not bool(user_mailing[1]))})
            done(user, vk_session=vk_session)
        elif event.text == 'second':
            c.execute('''SELECT * FROM mailing WHERE id=:id''', {'id': user['id']})
            user_mailing = c.fetchone()
            with conn:
                c.execute('''UPDATE mailing SET second=:second WHERE id=:id''',
                          {'id': user['id'], 'second': int(not bool(user_mailing[2]))})
            done(user, vk_session=vk_session)
        elif event.text == 'third':
            c.execute('''SELECT * FROM mailing WHERE id=:id''', {'id': user['id']})
            user_mailing = c.fetchone()
            with conn:
                c.execute('''UPDATE mailing SET third=:third WHERE id=:id''',
                          {'id': user['id'], 'third': int(not bool(user_mailing[3]))})
            done(user, vk_session=vk_session)
        elif user_from_db[4] is None:
            if event.text != "–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô":
                if event.text != '–ù–∞—á–∞—Ç—å' and not check_for_dig(event.text):
                    with conn:
                        c.execute('''UPDATE people SET nick_name=:nick_name WHERE id=:id''', {'id': user_from_db[0], 'nick_name': event.text})
                    ask_for_class(user, vk_session)
                else:
                    invalid_value(user, vk_session=vk_session)
                    ask_for_name(user, vk_session)
            else:
                ask_for_name(user, vk_session)
        elif user_from_db[5] is None:
            if event.text != "–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô":
                try:
                    if 1 <= int(event.text) <= 11:
                        with conn:
                            c.execute('''UPDATE people SET class=:class WHERE id=:id''',
                                      {'id': user_from_db[0], 'class': event.text})
                        ask_for_what(user, c=c, conn=conn, user_from_db=user_from_db, vk_session=vk_session)

                    else:
                        invalid_value(user, vk_session=vk_session)
                        ask_for_class(user, vk_session)
                except:
                    invalid_value(user, vk_session=vk_session)
                    ask_for_class(user, vk_session)
            else:
                with conn:
                    c.execute('''UPDATE people SET nick_name=:nick_name WHERE id=:id''', {'id': user_from_db[0], 'nick_name': None})
                ask_for_name(user, vk_session)
        elif user_from_db[6] is None:
            if event.text != "–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô":
                if event.text == '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–πüìö' or event.text == '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—ÉüíØ':
                    with conn:
                        c.execute('''UPDATE people SET for_what=:for_what WHERE id=:id''', {'id': user_from_db[0], 'for_what': event.text})
                    if event.text == '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–πüìö':
                        with conn:
                            c.execute('''UPDATE people SET exam=:exam WHERE id=:id''', {'id': user_from_db[0], 'exam': '-'})
                            c.execute('''UPDATE people SET kind=:kind WHERE id=:id''', {'id': user_from_db[0], 'kind': '-'})
                        thanq(user, vk_session=vk_session)
                    else:
                        if int(user_from_db[5]) < 10:
                            with conn:
                                c.execute('''UPDATE people SET exam=:exam WHERE id=:id''', {'id': user_from_db[0], 'exam': '–û–ì–≠'})
                            ask_for_kind(user,conn, c, user_from_db, vk_session=vk_session)
                        else:
                            ask_for_exam(user, conn, c, user_from_db, vk_session=vk_session)
                else:
                    invalid_value(user, vk_session=vk_session)
                    ask_for_what(user, conn, c, user_from_db, vk_session=vk_session)
            else:
                with conn:
                    c.execute('''UPDATE people SET class=:class WHERE id=:id''', {'id': user_from_db[0], 'class': None})
                    c.execute('''UPDATE people SET exam=:exam WHERE id=:id''', {'id': user_from_db[0], 'exam': None})
                    c.execute('''UPDATE people SET kind=:kind WHERE id=:id''', {'id': user_from_db[0], 'kind': None})
                ask_for_class(user, vk_session)
        elif user_from_db[7] is None:
            if event.text != "–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô":
                if event.text == "–ë–∞–∑—É" or event.text == "–ü—Ä–æ—Ñ–∏–ª—å":
                    with conn:
                        c.execute('''UPDATE people SET exam=:exam WHERE id=:id''', {'id': user_from_db[0], 'exam': event.text})
                    ask_for_kind(user, conn, c, user_from_db, vk_session=vk_session)
                else:
                    invalid_value(user, vk_session=vk_session)
                    ask_for_exam(user, conn, c, user_from_db, vk_session=vk_session)
            else:
                with conn:
                    c.execute('''UPDATE people SET for_what=:for_what WHERE id=:id''', {'id': user_from_db[0], 'for_what': None})
                ask_for_exam(user, conn, c, user_from_db, vk_session=vk_session)

        elif user_from_db[8] is None:
            if event.text != "–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô":
                if event.text == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ' or event.text == '–ì—Ä—É–ø–ø–æ–≤—ã–µ':
                    with conn:
                        c.execute('''UPDATE people SET kind=:kind WHERE id=:id''', {'id': user_from_db[0], 'kind': event.text})
                    thanq(user, vk_session=vk_session)
                else:
                    invalid_value(user, vk_session=vk_session)
                    ask_for_kind(user, conn, c, user_from_db, vk_session=vk_session)
            else:
                if int(user_from_db[5]) < 10:
                    with conn:
                        c.execute('''UPDATE people SET for_what=:for_what WHERE id=:id''', {'id': user_from_db[0], 'for_what': None})
                    ask_for_what(user, conn, c, user_from_db, vk_session=vk_session)
                else:
                    with conn:
                        c.execute('''UPDATE people SET exam=:exam WHERE id=:id''', {'id': user_from_db[0], 'exam': None})
                        c.execute('''UPDATE people SET for_what=:for_what WHERE id=:id''', {'id': user_from_db[0], 'for_what': None})
                    ask_for_exam(user, conn, c, user_from_db, vk_session=vk_session)
        elif event.text == '–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô':
            if user_from_db[6] == '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–πüìö':
                with conn:
                    c.execute('''UPDATE people SET for_what=:for_what WHERE id=:id''', {'id': user_from_db[0], 'for_what': None})
                    c.execute('''UPDATE people SET exam=:exam WHERE id=:id''', {'id': user_from_db[0], 'exam': None})
                    c.execute('''UPDATE people SET kind=:kind WHERE id=:id''', {'id': user_from_db[0], 'kind': None})
                ask_for_what(user, conn, c, user_from_db, vk_session=vk_session)
            else:
                with conn:
                    c.execute('''UPDATE people SET kind=:kind WHERE id=:id''', {'id': user_from_db[0], 'kind': None})
                ask_for_kind(user, conn, c, user_from_db, vk_session=vk_session)
        else:
            invalid_value(user, end=True, vk_session=vk_session)
    else:
        ask_for_podp(user, vk_session=vk_session)

def ask_for_name(user, vk_session):
    keyboard = vk_api.keyboard.VkKeyboard()
    keyboard.add_button('–ü–æ–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—ÉüÜï', vk_api.keyboard.VkKeyboardColor.POSITIVE)
    keyboard.add_line()
    keyboard.add_button('–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô', vk_api.keyboard.VkKeyboardColor.NEGATIVE)
    keyboard.add_line()
    keyboard.add_button('–†–∞—Å—Å—ã–ª–∫–∞üì´', vk_api.keyboard.VkKeyboardColor.PRIMARY)
    vk_session.method('messages.send',
                      {'user_id': user['id'], 'random_id': random.getrandbits(64), 'message': '–ö–∞–∫ –í–∞—à–µ –∏–º—è?',
                       'keyboard': keyboard.get_keyboard()})

def ask_for_class(user, vk_session):
    vk_session.method('messages.send',
                      {'user_id': user['id'], 'random_id': random.getrandbits(64), 'message': '–í –∫–∞–∫–æ–º –í—ã –∫–ª–∞—Å—Å–µ?'})

def ask_for_what(user, conn, c, user_from_db, vk_session):
    keyboard = vk_api.keyboard.VkKeyboard(inline=True)
    keyboard.add_button("–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–πüìö", color=vk_api.keyboard.VkKeyboardColor.POSITIVE)
    keyboard.add_line()
    keyboard.add_button("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—ÉüíØ", color=vk_api.keyboard.VkKeyboardColor.POSITIVE)
    message_id = vk_session.method('messages.send', {'user_id': user['id'], 'random_id': random.getrandbits(64),
                                                      'message': '–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                                                      'keyboard': keyboard.get_keyboard()})
    with conn:
        c.execute('''UPDATE people SET message_id=:message_id WHERE id=:id''', {'id': user_from_db[0], 'message_id': message_id})

def ask_for_kind(user, conn, c, user_from_db, vk_session):
    keyboard = vk_api.keyboard.VkKeyboard(inline=True)
    keyboard.add_button("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ", color=vk_api.keyboard.VkKeyboardColor.POSITIVE)
    keyboard.add_line()
    keyboard.add_button("–ì—Ä—É–ø–ø–æ–≤—ã–µ", color=vk_api.keyboard.VkKeyboardColor.POSITIVE)
    message_id = vk_session.method('messages.send', {'user_id': user['id'], 'random_id': random.getrandbits(64),
                                                     'message': '–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–Ω—è—Ç–∏–π –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?',
                                                     'keyboard': keyboard.get_keyboard()})
    with conn:
        c.execute('''UPDATE people SET message_id=:message_id WHERE id=:id''', {'id': user_from_db[0], 'message_id': message_id})

def ask_for_exam(user, conn, c, user_from_db, vk_session):
    keyboard = vk_api.keyboard.VkKeyboard(inline=True)
    keyboard.add_button("–ë–∞–∑—É", color=vk_api.keyboard.VkKeyboardColor.POSITIVE)
    keyboard.add_button("–ü—Ä–æ—Ñ–∏–ª—å", color=vk_api.keyboard.VkKeyboardColor.POSITIVE)
    message_id = vk_session.method('messages.send', {'user_id': user['id'], 'random_id': random.getrandbits(64),
                                                     'message': '–ö–∞–∫–æ–π –≤–∏–¥ —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–¥–∞–≤–∞—Ç—å?',
                                                     'keyboard': keyboard.get_keyboard()})
    with conn:
        c.execute('''UPDATE people SET message_id=:message_id WHERE id=:id''', {'id': user_from_db[0], 'message_id': message_id})

def del_keyboard(message_id, vk_session):
    message = vk_session.method('messages.getById', {'message_ids': message_id})['items'][0]
    keyboard = vk_api.keyboard.VkKeyboard()
    keyboard.add_button('–ü–æ–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—ÉüÜï', vk_api.keyboard.VkKeyboardColor.POSITIVE)
    keyboard.add_line()
    keyboard.add_button('–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô', vk_api.keyboard.VkKeyboardColor.NEGATIVE)
    keyboard.add_line()
    keyboard.add_button('–†–∞—Å—Å—ã–ª–∫–∞üì´', vk_api.keyboard.VkKeyboardColor.PRIMARY)
    vk_session.method('messages.edit', {'message': message['text'], 'message_id': message_id,
                                        'keyboard': keyboard.get_keyboard(),
                                        'peer_id': message['peer_id']})

def invalid_value(user, vk_session, end=False):
    if not end:
        vk_session.method('messages.send', {'user_id': user['id'], 'message': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –í–∞–º–∏ –¥–∞–Ω–Ω—ã—ÖüôÖüôá.', 'random_id': random.getrandbits(64)})
    else:
        keyboard = vk_api.keyboard.VkKeyboard()
        keyboard.add_button('–ü–æ–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—ÉüÜï', vk_api.keyboard.VkKeyboardColor.POSITIVE)
        keyboard.add_line()
        keyboard.add_button('–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô', vk_api.keyboard.VkKeyboardColor.NEGATIVE)
        keyboard.add_line()
        keyboard.add_button('–†–∞—Å—Å—ã–ª–∫–∞üì´', vk_api.keyboard.VkKeyboardColor.PRIMARY)
        vk_session.method('messages.send',
                          {'user_id': user['id'], 'message': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –í–∞–º–∏ –¥–∞–Ω–Ω—ã—ÖüôÖüôá.',
                           'random_id': random.getrandbits(64),
                           'keyboard': keyboard.get_keyboard()})

def thanq(user, vk_session):
    keyboard = vk_api.keyboard.VkKeyboard()
    keyboard.add_button('–ü–æ–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—ÉüÜï',vk_api.keyboard.VkKeyboardColor.POSITIVE)
    keyboard.add_line()
    keyboard.add_button('–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô', vk_api.keyboard.VkKeyboardColor.NEGATIVE)
    keyboard.add_line()
    keyboard.add_button('–†–∞—Å—Å—ã–ª–∫–∞üì´', vk_api.keyboard.VkKeyboardColor.PRIMARY)
    vk_session.method('messages.send', {'user_id': user['id'], 'random_id': random.getrandbits(64),
                                        'message': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–∞—à –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èüòä.',
                                        'keyboard': keyboard.get_keyboard()})

def ask_for_podp(user, vk_session):
    keyboard = vk_api.keyboard.VkKeyboard(one_time=True)
    keyboard.add_button('–ù–∞—á–∞—Ç—å', vk_api.keyboard.VkKeyboardColor.PRIMARY)
    vk_session.method('messages.send', {'user_id': user['id'], 'random_id': random.getrandbits(64),
                                        'message': '–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—Éüòã',
                                        'keyboard': keyboard.get_keyboard()})

def check_for_dig(text: str):
    for i in range(10):
        if text.find(str(i)) != -1:
            return True
    return False

def done(user, vk_session):
    keyboard = vk_api.keyboard.VkKeyboard()
    keyboard.add_button('–ü–æ–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—ÉüÜï', vk_api.keyboard.VkKeyboardColor.POSITIVE)
    keyboard.add_line()
    keyboard.add_button('–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—Éüîô', vk_api.keyboard.VkKeyboardColor.NEGATIVE)
    keyboard.add_line()
    keyboard.add_button('–†–∞—Å—Å—ã–ª–∫–∞üì´', vk_api.keyboard.VkKeyboardColor.PRIMARY)
    vk_session.method('messages.send', {'user_id': user['id'], 'random_id': random.getrandbits(64),
                                        'message': '–£—Å–ø–µ—Ö!',
                                        'keyboard': keyboard.get_keyboard()})

def mailing(user, conn, c, user_from_db, vk_session):
    keyboard = vk_api.keyboard.VkKeyboard(inline=True)
    c.execute('''SELECT * FROM mailing WHERE id=:id''', {'id': user['id']})
    user_mailing = c.fetchone()
    if user_mailing[1]:
        keyboard.add_button('first', vk_api.keyboard.VkKeyboardColor.POSITIVE)
    else:
        keyboard.add_button('first', vk_api.keyboard.VkKeyboardColor.NEGATIVE)
    if user_mailing[2]:
        keyboard.add_button('second', vk_api.keyboard.VkKeyboardColor.POSITIVE)
    else:
        keyboard.add_button('second', vk_api.keyboard.VkKeyboardColor.NEGATIVE)
    if user_mailing[3]:
        keyboard.add_button('third', vk_api.keyboard.VkKeyboardColor.POSITIVE)
    else:
        keyboard.add_button('third', vk_api.keyboard.VkKeyboardColor.NEGATIVE)
    message_id = vk_session.method('messages.send', {'user_id': user['id'], 'random_id': random.getrandbits(64),
                                        'message': '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.\n(–ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É)',
                                        'keyboard': keyboard.get_keyboard()})
    with conn:
        c.execute('''UPDATE people SET message_id=:message_id WHERE id=:id''', {'id': user_from_db[0], 'message_id': message_id})